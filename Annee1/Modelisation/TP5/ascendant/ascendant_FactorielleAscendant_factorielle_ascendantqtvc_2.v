(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x => x
  end.

Parameter factorielle: Numbers.BinNums.Z -> Numbers.BinNums.Z.

Axiom factorielle_zero : ((factorielle 0%Z) = 1%Z).

Axiom factorielle_succ :
  forall (n:Numbers.BinNums.Z), (0%Z <= n)%Z ->
  ((factorielle (n + 1%Z)%Z) = ((n + 1%Z)%Z * (factorielle n))%Z).

Parameter n: Numbers.BinNums.Z.

Axiom Requires : (0%Z <= n)%Z.

Parameter r: Numbers.BinNums.Z.

Parameter i: Numbers.BinNums.Z.

Axiom H : ((factorielle i) = r).

Axiom H1 : (0%Z <= i)%Z.

Axiom H2 : (i <= n)%Z.

Axiom H3 : (i < n)%Z.

Parameter i1: Numbers.BinNums.Z.

Axiom Ensures : (i1 = (i + 1%Z)%Z).

Parameter r1: Numbers.BinNums.Z.

Axiom Ensures1 : (r1 = (i1 * r)%Z).

(* Why3 goal *)
Theorem factorielle_ascendant'vc :
  (0%Z <= (n - i)%Z)%Z /\ ((n - i1)%Z < (n - i)%Z)%Z.
Proof.


Qed.

